{"version":3,"file":"ng-password-validator.mjs","sources":["../../../projects/ng-password-validator/src/lib/ng-password-validator.service.ts","../../../projects/ng-password-validator/src/lib/options.ts","../../../projects/ng-password-validator/src/lib/data.service.ts","../../../projects/ng-password-validator/src/lib/ng-password-validator.component.ts","../../../projects/ng-password-validator/src/lib/ng-password-validator.component.html","../../../projects/ng-password-validator/src/lib/utils.service.ts","../../../projects/ng-password-validator/src/lib/ng-password-validator.directive.ts","../../../projects/ng-password-validator/src/lib/ng-password-validator.module.ts","../../../projects/ng-password-validator/src/public-api.ts","../../../projects/ng-password-validator/src/ng-password-validator.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NgPasswordValidatorService {\r\n  constructor() {}\r\n}\r\n","import {\r\n  IStatus,\r\n  NgPasswordValidatorOptions,\r\n} from './ng-password-validator.interface';\r\n\r\nexport const defaultOptions: NgPasswordValidatorOptions = {\r\n  placement: 'bottom',\r\n  'z-index': 0,\r\n  'custom-class': '',\r\n  shadow: true,\r\n  theme: 'pro',\r\n  type: 'popup',\r\n  offset: 8,\r\n  heading: 'Password Policy',\r\n  successMessage: 'Awesome! Password requirement fulfilled.',\r\n  rules: {\r\n    password: {\r\n      type: 'range',\r\n      length: 8,\r\n      min: 6,\r\n      max: 10,\r\n    },\r\n    'include-symbol': true,\r\n    'include-number': true,\r\n    'include-lowercase-characters': true,\r\n    'include-uppercase-characters': true,\r\n  },\r\n};\r\n\r\nexport const initializeStage: IStatus = {\r\n  password: false,\r\n  'include-symbol': false,\r\n  'include-number': false,\r\n  'include-lowercase-characters': false,\r\n  'include-uppercase-characters': false,\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { IStatus } from './ng-password-validator.interface';\r\n\r\nimport { initializeStage } from './options';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n  private value = new BehaviorSubject(initializeStage);\r\n  updatedValue = this.value.asObservable();\r\n\r\n  updateValue(data: IStatus): void {\r\n    this.value.next(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\nimport { DataService } from './data.service';\r\nimport {\r\n  IElementPosition,\r\n  IRules,\r\n  IStatus,\r\n  NgPasswordValidatorOptions,\r\n} from './ng-password-validator.interface';\r\nimport { defaultOptions } from './options';\r\n\r\n@Component({\r\n  selector: 'lib-ng-password-validator',\r\n  templateUrl: './ng-password-validator.component.html',\r\n  host: { class: 'popup' },\r\n  styleUrls: ['./ng-password-validator.component.scss'],\r\n})\r\nexport class NgPasswordValidatorComponent implements OnInit, OnChanges {\r\n  heading: string;\r\n  successMessage: string;\r\n  passwordStatus = {\r\n    password: false,\r\n    'include-symbol': false,\r\n    'include-number': false,\r\n    'include-lowercase-characters': false,\r\n    'include-uppercase-characters': false,\r\n  };\r\n  isSecure = false;\r\n  Show = false;\r\n  events = new EventEmitter();\r\n  passwordOptions: NgPasswordValidatorOptions = { ...defaultOptions };\r\n\r\n  @Input() data: any;\r\n\r\n  @HostBinding('style.top') hostStyleTop: string;\r\n  @HostBinding('style.left') hostStyleLeft: string;\r\n  @HostBinding('style.z-index') hostStyleZIndex: number;\r\n  @HostBinding('style.transition') hostStyleTransition: string;\r\n  @HostBinding('style.width') hostStyleWidth: string;\r\n  @HostBinding('style.max-width') hostStyleMaxWidth: string;\r\n  @HostBinding('style.pointer-events') hostStylePointerEvents: string;\r\n  @HostBinding('class.popup-show') hostClassShow: boolean;\r\n  @HostBinding('class.popup-shadow') hostClassShadow: boolean;\r\n\r\n  /**\r\n   * Host listener transition end\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  @HostListener('transitionend', [''])\r\n  transitionEnd(): void {\r\n    if (this.show) {\r\n      this.events.emit({\r\n        type: 'shown',\r\n      });\r\n    }\r\n  }\r\n\r\n  @Input() set show(value: boolean) {\r\n    if (value) {\r\n      this.setPosition();\r\n    }\r\n    this.Show = this.hostClassShow = value;\r\n  }\r\n\r\n  get show(): boolean {\r\n    return this.Show;\r\n  }\r\n\r\n  get placement(): string {\r\n    return this.data.options.placement;\r\n  }\r\n\r\n  get element() {\r\n    return this.data.element;\r\n  }\r\n\r\n  get elementPosition(): IElementPosition {\r\n    return this.data.elementPosition;\r\n  }\r\n\r\n  get options(): NgPasswordValidatorOptions {\r\n    return this.data.options;\r\n  }\r\n\r\n  get popupOffset(): number {\r\n    switch (this.data.options.offset) {\r\n      case '':\r\n        return defaultOptions.offset;\r\n\r\n      case '0':\r\n        return +this.data.options.offset;\r\n\r\n      default:\r\n        return +this.data.options.offset;\r\n    }\r\n  }\r\n\r\n  get rules(): IRules {\r\n    return {\r\n      ...this.data.defaultOptions.rules,\r\n      ...this.data.options.rules,\r\n    };\r\n  }\r\n\r\n  get defaultOptions(): NgPasswordValidatorOptions {\r\n    return this.data.defaultOptions;\r\n  }\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2,\r\n    private dataService: DataService\r\n  ) {}\r\n\r\n  /**\r\n   * Component initialization\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  ngOnInit(): void {\r\n    this.setCustomClass();\r\n    this.setStyles();\r\n    this.setTheme();\r\n    this.setCustomText();\r\n\r\n    this.dataService.updatedValue.subscribe((data: IStatus) => {\r\n      this.passwordStatus = { ...this.passwordStatus, ...data };\r\n      for (const propName in this.passwordOptions.rules) {\r\n        if (!this.passwordOptions.rules[propName]) {\r\n          delete this.passwordStatus[propName];\r\n        }\r\n      }\r\n      this.isSecure = Object.values(this.passwordStatus).every(\r\n        (value: boolean) => value\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes && changes.data && changes.data.currentValue) {\r\n      this.data = changes.data.currentValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set popup window position\r\n   *\r\n   * @returns {void}\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setPosition(): void {\r\n    if (this.setHostStyle(this.placement)) {\r\n      this.setPlacementClass(this.placement);\r\n\r\n      return;\r\n    } else {\r\n      // Is popup outside the visible area\r\n      const placements = ['top', 'right', 'bottom', 'left'];\r\n      let isPlacementSet;\r\n\r\n      for (const placement of placements) {\r\n        if (this.setHostStyle(placement)) {\r\n          this.setPlacementClass(placement);\r\n          isPlacementSet = true;\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Set original placement\r\n      if (!isPlacementSet) {\r\n        this.setHostStyle(this.placement);\r\n        this.setPlacementClass(this.placement);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set popup placement class\r\n   *\r\n   * @param {string} placement\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setPlacementClass(placement: string): void {\r\n    this.renderer.addClass(this.elementRef.nativeElement, 'popup-' + placement);\r\n  }\r\n\r\n  /**\r\n   * Set host element style\r\n   *\r\n   * @param {string} placement\r\n   * @returns {boolean}\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setHostStyle(placement: string): boolean {\r\n    const isSvg = this.element instanceof SVGElement;\r\n    const popup = this.elementRef.nativeElement;\r\n    const isCustomPosition = !this.elementPosition.right;\r\n\r\n    let elementHeight = isSvg\r\n      ? this.element.getBoundingClientRect().height\r\n      : this.element.offsetHeight;\r\n    let elementWidth = isSvg\r\n      ? this.element.getBoundingClientRect().width\r\n      : this.element.offsetWidth;\r\n    const popupHeight = popup.clientHeight;\r\n    const popupWidth = popup.clientWidth;\r\n    const scrollY = window.pageYOffset;\r\n\r\n    if (isCustomPosition) {\r\n      elementHeight = 0;\r\n      elementWidth = 0;\r\n    }\r\n\r\n    let topStyle;\r\n    let leftStyle;\r\n\r\n    switch (placement) {\r\n      case 'top':\r\n        topStyle =\r\n          this.elementPosition.top + scrollY - (popupHeight + this.popupOffset);\r\n        leftStyle = this.elementPosition.left;\r\n\r\n        break;\r\n\r\n      case 'bottom':\r\n        topStyle =\r\n          this.elementPosition.top + scrollY + elementHeight + this.popupOffset;\r\n        leftStyle = this.elementPosition.left;\r\n\r\n        break;\r\n      case 'left':\r\n        leftStyle = this.elementPosition.left - popupWidth - this.popupOffset;\r\n        topStyle = this.elementPosition.top + scrollY;\r\n\r\n        break;\r\n\r\n      case 'right':\r\n        leftStyle = this.elementPosition.left + elementWidth + this.popupOffset;\r\n        topStyle = this.elementPosition.top + scrollY;\r\n    }\r\n\r\n    this.hostStyleTop = topStyle + 'px';\r\n    this.hostStyleLeft = leftStyle + 'px';\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets Z-index\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setZIndex(): void {\r\n    if (this.options['z-index'] !== 0) {\r\n      this.hostStyleZIndex = this.options['z-index'];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ste custom class name\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setCustomClass(): void {\r\n    if (this.options['custom-class']) {\r\n      this.options['custom-class'].split(' ').forEach((className: string) => {\r\n        this.renderer.addClass(this.elementRef.nativeElement, className);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set theme\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setTheme(): void {\r\n    if (this.options['theme']) {\r\n      this.renderer.addClass(\r\n        this.elementRef.nativeElement,\r\n        'popup-' + this.options['theme']\r\n      );\r\n    }\r\n  }\r\n\r\n  setCustomText(): void {\r\n    if (this.options['heading']) {\r\n      this.heading = this.options['heading'];\r\n    }\r\n\r\n    if (this.options['successMessage']) {\r\n      this.successMessage = this.options['successMessage'];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the animation duration\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setAnimationDuration(): void {\r\n    this.hostStyleTransition =\r\n      'opacity ' + this.options['animation-duration'] + 'ms';\r\n  }\r\n\r\n  /**\r\n   * Set popup window style\r\n   *\r\n   * @memberof NgPasswordValidatorComponent\r\n   */\r\n  setStyles(): void {\r\n    this.setZIndex();\r\n    this.setAnimationDuration();\r\n    if (this.options.type !== 'inline') {\r\n      this.hostClassShadow = this.options['shadow'];\r\n    }\r\n    this.hostStyleMaxWidth = this.options['max-width'] + 'px';\r\n    this.hostStyleWidth = this.options['width']\r\n      ? this.options['width'] + 'px'\r\n      : '';\r\n  }\r\n}\r\n","<div class=\"popup-window\">\r\n  <div class=\"heading\">{{heading}}</div>\r\n  <div *ngIf=\"rules['password']\">\r\n    <div class=\"rule\" [hidden]=\"rules['password'].type !== 'number'\"\r\n      [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\r\n      Password length should be {{rules['password'].length}} characters.\r\n    </div>\r\n    <div class=\"rule\" [hidden]=\"rules['password'].type !== 'range'\"\r\n      [ngClass]=\"{'rule-pass':passwordStatus['password']}\">\r\n      Password length should be {{rules['password'].min}} - {{rules['password'].max}}\r\n      characters.\r\n    </div>\r\n  </div>\r\n  <div class=\"rule\" [hidden]=\"!rules['include-symbol']\" [ngClass]=\"{'rule-pass':passwordStatus['include-symbol']}\">\r\n    Include Symbols:( e.g. @#$% )\r\n  </div>\r\n  <div class=\"rule\" [hidden]=\"!rules['include-number']\" [ngClass]=\"{'rule-pass':passwordStatus['include-number']}\">\r\n    Include Numbers:( e.g.123456 )\r\n  </div>\r\n  <div class=\"rule\" [hidden]=\"!rules['include-lowercase-characters']\"\r\n    [ngClass]=\"{'rule-pass':passwordStatus['include-lowercase-characters']}\">\r\n    Include Lowercase Characters:(e.g. abcdefgh )\r\n  </div>\r\n  <div class=\"rule\" [hidden]=\"!rules['include-uppercase-characters']\"\r\n    [ngClass]=\"{'rule-pass':passwordStatus['include-uppercase-characters']}\">\r\n    Include Uppercase Characters:(e.g. ABCDEFGH )\r\n  </div>\r\n  <div class=\"success-message\" [hidden]=\"!isSecure\">\r\n    {{successMessage}}\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { NgPasswordValidatorOptions } from './ng-password-validator.interface';\r\n\r\n@Injectable()\r\nexport class UtilsService {\r\n  /**\r\n   * Deep merge objects\r\n   *\r\n   * @param {NgPasswordValidatorOptions} target\r\n   * @param {NgPasswordValidatorOptions} source\r\n   * @returns {NgPasswordValidatorOptions}\r\n   * @memberof UtilsService\r\n   */\r\n  deepMerge(\r\n    target: NgPasswordValidatorOptions,\r\n    source: NgPasswordValidatorOptions\r\n  ): NgPasswordValidatorOptions {\r\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n    for (const key of Object.keys(source)) {\r\n      if (source[key] instanceof Object) {\r\n        Object.assign(source[key], this.deepMerge(target[key], source[key]));\r\n      }\r\n    }\r\n\r\n    // Join `target` and modified `source`\r\n    Object.assign(target || {}, source);\r\n\r\n    return target;\r\n  }\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Directive,\r\n  ElementRef,\r\n  EmbeddedViewRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Inject,\r\n  Injector,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChange,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { DataService } from './data.service';\r\nimport { NgPasswordValidatorComponent } from './ng-password-validator.component';\r\nimport {\r\n  HostComponent,\r\n  IElementPosition,\r\n  IPosition,\r\n  NgPasswordValidatorOptions,\r\n} from './ng-password-validator.interface';\r\nimport { NgPasswordValidatorService } from './ng-password-validator.service';\r\nimport { defaultOptions } from './options';\r\nimport { UtilsService } from './utils.service';\r\n\r\n@Directive({\r\n  selector: '[NgPasswordValidator]',\r\n  exportAs: 'NgPasswordValidator',\r\n})\r\nexport class NgPasswordValidatorDirective implements OnDestroy, OnChanges {\r\n  regExpForLength = /^(.){8}$/;\r\n  regExpForOneUpper = /^(?=.*[A-Z])(.*)$/;\r\n  regExpForOneLower = /^(?=.*[a-z])(.*)$/;\r\n  regExpForOneDigit = /^(?=.*[0-9])(.*)$/;\r\n  regExpForSpecialCharacters = /^(?=.*[!@#$%^&*])([a-zA-Z0-9!@#$%^&*]*)$/;\r\n\r\n  isValid = false;\r\n  inputValue = '';\r\n  componentRef: any;\r\n  elementPosition: IElementPosition;\r\n  passwordOptions: NgPasswordValidatorOptions;\r\n  componentSubscribe: Subscription;\r\n\r\n  @Input('NgPasswordValidator') popup: NgPasswordValidatorOptions;\r\n\r\n  @Output() events: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() valid: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  constructor(\r\n    @Optional() @Inject(NgPasswordValidatorService) private initOptions,\r\n    private elementRef: ElementRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private appRef: ApplicationRef,\r\n    private dataService: DataService,\r\n    private utilsService: UtilsService,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  get options() {\r\n    return this.passwordOptions;\r\n  }\r\n\r\n  get isPopupDestroyed(): boolean {\r\n    return this.componentRef && this.componentRef.hostView.destroyed;\r\n  }\r\n\r\n  get popupPosition(): IElementPosition | IPosition {\r\n    if (this.options['position']) {\r\n      return this.options['position'];\r\n    } else {\r\n      return this.elementPosition;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus in input field\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  @HostListener('focusin', ['$event.target.value'])\r\n  onMouseEnter(value: any): void {\r\n    this.updatePasswordOptions();\r\n    this.show();\r\n    this.checkPassword(value);\r\n  }\r\n\r\n  /**\r\n   * Focus out of input field\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  @HostListener('focusout')\r\n  onMouseLeave(): void {\r\n    // If the template type is inline, don't destroy the created template\r\n    if (this.passwordOptions.type !== 'inline') {\r\n      this.destroyPopup();\r\n    }\r\n    this.valid.emit(this.isValid);\r\n  }\r\n\r\n  /**\r\n   * Input field value\r\n   *\r\n   * @param {string} value\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  @HostListener('input', ['$event.target.value'])\r\n  onInput(value: string): void {\r\n    this.checkPassword(value);\r\n  }\r\n\r\n  /**\r\n   * On input change\r\n   *\r\n   * @param {{ popup: SimpleChange }} changes\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  ngOnChanges(changes: { popup: SimpleChange }): void {\r\n    // If the template type is 'inline' create the inline template directly\r\n    const templateType = changes.popup.currentValue.type;\r\n    if (templateType === 'inline') {\r\n      this.updatePasswordOptions();\r\n      this.show();\r\n    }\r\n    const changedOptions = this.getProperties(changes);\r\n    this.applyOptionsDefault(changedOptions, defaultOptions);\r\n  }\r\n\r\n  /**\r\n   * Destroy the pop up and unsubscribe to release the memory\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.destroyPopup();\r\n    if (this.componentSubscribe) {\r\n      this.componentSubscribe.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create password regex\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  createPasswordRegex(): void {\r\n    if (this.passwordOptions.rules.password) {\r\n      switch (this.passwordOptions.rules['password'].type) {\r\n        case 'number':\r\n          this.regExpForLength = new RegExp(\r\n            `^(.){${this.passwordOptions.rules['password'].length}}$`\r\n          );\r\n          break;\r\n\r\n        case 'range':\r\n          this.regExpForLength = new RegExp(\r\n            `^(.){${this.passwordOptions.rules['password'].min},${this.passwordOptions.rules['password'].max}}$`\r\n          );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check password if valid or not\r\n   *\r\n   * @param {string} inputValue\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  checkPassword(inputValue: string): void {\r\n    const data = {\r\n      password:\r\n        inputValue &&\r\n        inputValue.length &&\r\n        inputValue.match(this.regExpForLength)\r\n          ? true\r\n          : false,\r\n      'include-symbol':\r\n        inputValue &&\r\n        inputValue.length &&\r\n        inputValue.match(this.regExpForSpecialCharacters)\r\n          ? true\r\n          : false,\r\n      'include-number':\r\n        inputValue &&\r\n        inputValue.length &&\r\n        inputValue.match(this.regExpForOneDigit)\r\n          ? true\r\n          : false,\r\n      'include-lowercase-characters':\r\n        inputValue &&\r\n        inputValue.length &&\r\n        inputValue.match(this.regExpForOneLower)\r\n          ? true\r\n          : false,\r\n      'include-uppercase-characters':\r\n        inputValue &&\r\n        inputValue.length &&\r\n        inputValue.match(this.regExpForOneUpper)\r\n          ? true\r\n          : false,\r\n    };\r\n\r\n    for (const propName in this.passwordOptions.rules) {\r\n      if (!this.passwordOptions.rules[propName]) {\r\n        delete data[propName];\r\n      }\r\n    }\r\n    this.isValid = Object.values(data).every((value: boolean) => value);\r\n    this.dataService.updateValue(data);\r\n  }\r\n\r\n  /**\r\n   * Update password options\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  updatePasswordOptions(): void {\r\n    if (this.popup && defaultOptions) {\r\n      this.passwordOptions = this.utilsService.deepMerge(\r\n        defaultOptions,\r\n        this.popup\r\n      );\r\n    } else {\r\n      this.passwordOptions = { ...defaultOptions };\r\n    }\r\n    this.createPasswordRegex();\r\n  }\r\n\r\n  /**\r\n   * Get properties\r\n   *\r\n   * @param {{ popup: SimpleChange }} changes\r\n   * @returns {{ popup: any }}\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  getProperties(changes: { popup: SimpleChange }): { popup: any } {\r\n    const directiveProperties: any = {};\r\n    let customProperties: any = {};\r\n    let allProperties: any = {};\r\n\r\n    for (const prop in changes) {\r\n      if (prop !== 'options') {\r\n        directiveProperties[prop] = changes[prop].currentValue;\r\n      }\r\n      if (prop === 'options') {\r\n        customProperties = changes[prop].currentValue;\r\n      }\r\n    }\r\n\r\n    allProperties = Object.assign({}, customProperties, directiveProperties);\r\n\r\n    return allProperties;\r\n  }\r\n\r\n  /**\r\n   * Get element position\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  getElementPosition(): void {\r\n    this.elementPosition =\r\n      this.elementRef.nativeElement.getBoundingClientRect();\r\n  }\r\n\r\n  /**\r\n   * Create Popup\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  createPopup(): void {\r\n    this.getElementPosition();\r\n    this.appendComponentToBody(NgPasswordValidatorComponent);\r\n    this.showPopupElem();\r\n  }\r\n\r\n  /**\r\n   * Destroy Popup\r\n   *\r\n   * @returns {void}\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  destroyPopup(): void {\r\n    if (!this.isPopupDestroyed) {\r\n      this.hidePopup();\r\n\r\n      if (!this.componentRef || this.isPopupDestroyed) {\r\n        return;\r\n      }\r\n\r\n      this.appRef.detachView(this.componentRef.hostView);\r\n      this.componentRef.destroy();\r\n      this.events.emit({\r\n        type: 'hidden',\r\n        position: this.popupPosition,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show popup window\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  showPopupElem(): void {\r\n    (this.componentRef.instance as HostComponent).show = true;\r\n    this.events.emit({\r\n      type: 'show',\r\n      position: this.popupPosition,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Hide popup window\r\n   *\r\n   * @returns {void}\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  hidePopup(): void {\r\n    if (!this.componentRef || this.isPopupDestroyed) {\r\n      return;\r\n    }\r\n    (this.componentRef.instance as HostComponent).show = false;\r\n    this.events.emit({\r\n      type: 'hide',\r\n      position: this.popupPosition,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Append created popup window to body\r\n   *\r\n   * @param {*} component\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  appendComponentToBody(component: any): void {\r\n    this.componentRef = this.componentFactoryResolver\r\n      .resolveComponentFactory(component)\r\n      .create(this.injector);\r\n    (this.componentRef.instance as HostComponent).data = {\r\n      element: this.elementRef.nativeElement,\r\n      elementPosition: this.popupPosition,\r\n      options: this.options,\r\n      defaultOptions,\r\n    };\r\n\r\n    this.appRef.attachView(this.componentRef.hostView);\r\n    const domElem = (this.componentRef.hostView as EmbeddedViewRef<any>)\r\n      .rootNodes[0] as HTMLElement;\r\n    document.body.appendChild(domElem);\r\n\r\n    this.componentSubscribe = (\r\n      this.componentRef.instance as HostComponent\r\n    ).events.subscribe((event: any) => {\r\n      this.handleEvents(event);\r\n    });\r\n\r\n    if (this.options.type === 'inline') {\r\n      this.elementRef.nativeElement.style.marginBottom =\r\n        this.popupPosition['bottom'] + 'px';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset/switching back to default options\r\n   *\r\n   * @param {NgPasswordValidatorOptions} defaultOption\r\n   * @param {{ popup: SimpleChange }} options\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  applyOptionsDefault(\r\n    options: { popup: SimpleChange },\r\n    defaultOption: NgPasswordValidatorOptions\r\n  ): void {\r\n    this.initOptions = Object.assign(\r\n      {},\r\n      this.initOptions || {},\r\n      options,\r\n      defaultOption\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle events\r\n   *\r\n   * @param {*} event\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  handleEvents(event: any): void {\r\n    if (event.type === 'shown') {\r\n      this.events.emit({\r\n        type: 'shown',\r\n        position: this.popupPosition,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * It creates popup window to show password requirement\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  show(): void {\r\n    if (!this.componentRef || this.isPopupDestroyed) {\r\n      this.createPopup();\r\n    } else if (!this.isPopupDestroyed) {\r\n      this.showPopupElem();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide/Destroys popup windows\r\n   *\r\n   * @memberof NgPasswordValidatorDirective\r\n   */\r\n  hide(): void {\r\n    this.destroyPopup();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { DataService } from './data.service';\r\nimport { NgPasswordValidatorComponent } from './ng-password-validator.component';\r\nimport { NgPasswordValidatorDirective } from './ng-password-validator.directive';\r\nimport { NgPasswordValidatorOptions } from './ng-password-validator.interface';\r\nimport { NgPasswordValidatorService } from './ng-password-validator.service';\r\nimport { UtilsService } from './utils.service';\r\n\r\n@NgModule({\r\n    declarations: [NgPasswordValidatorDirective, NgPasswordValidatorComponent],\r\n    imports: [CommonModule],\r\n    providers: [DataService, UtilsService],\r\n    exports: [NgPasswordValidatorDirective]\r\n})\r\nexport class NgPasswordValidatorModule {\r\n  /**\r\n   * Password validator module\r\n   *\r\n   * @static\r\n   * @param {NgPasswordValidatorOptions} initOptions\r\n   * @returns {ModuleWithProviders<NgPasswordValidatorModule>}\r\n   * @memberof NgPasswordValidatorModule\r\n   */\r\n  static forRoot(\r\n    initOptions: NgPasswordValidatorOptions\r\n  ): ModuleWithProviders<NgPasswordValidatorModule> {\r\n    return {\r\n      ngModule: NgPasswordValidatorModule,\r\n      providers: [\r\n        {\r\n          provide: NgPasswordValidatorService,\r\n          useValue: initOptions,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ng-password-validator\r\n */\r\n\r\nexport * from './lib/ng-password-validator.service';\r\nexport * from './lib/ng-password-validator.component';\r\nexport * from './lib/ng-password-validator.module';\r\nexport * from './lib/ng-password-validator.directive';\r\nexport * from './lib/ng-password-validator.interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.DataService","i2.UtilsService"],"mappings":";;;;;;MAKa,0BAA0B,CAAA;AACrC,IAAA,WAAA,GAAA,GAAgB;;wHADL,0BAA0B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAA1B,0BAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,0BAA0B,cAFzB,MAAM,EAAA,CAAA,CAAA;4FAEP,0BAA0B,EAAA,UAAA,EAAA,CAAA;kBAHtC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACCM,MAAM,cAAc,GAA+B;AACxD,IAAA,SAAS,EAAE,QAAQ;AACnB,IAAA,SAAS,EAAE,CAAC;AACZ,IAAA,cAAc,EAAE,EAAE;AAClB,IAAA,MAAM,EAAE,IAAI;AACZ,IAAA,KAAK,EAAE,KAAK;AACZ,IAAA,IAAI,EAAE,OAAO;AACb,IAAA,MAAM,EAAE,CAAC;AACT,IAAA,OAAO,EAAE,iBAAiB;AAC1B,IAAA,cAAc,EAAE,0CAA0C;AAC1D,IAAA,KAAK,EAAE;AACL,QAAA,QAAQ,EAAE;AACR,YAAA,IAAI,EAAE,OAAO;AACb,YAAA,MAAM,EAAE,CAAC;AACT,YAAA,GAAG,EAAE,CAAC;AACN,YAAA,GAAG,EAAE,EAAE;AACR,SAAA;AACD,QAAA,gBAAgB,EAAE,IAAI;AACtB,QAAA,gBAAgB,EAAE,IAAI;AACtB,QAAA,8BAA8B,EAAE,IAAI;AACpC,QAAA,8BAA8B,EAAE,IAAI;AACrC,KAAA;CACF,CAAC;AAEK,MAAM,eAAe,GAAY;AACtC,IAAA,QAAQ,EAAE,KAAK;AACf,IAAA,gBAAgB,EAAE,KAAK;AACvB,IAAA,gBAAgB,EAAE,KAAK;AACvB,IAAA,8BAA8B,EAAE,KAAK;AACrC,IAAA,8BAA8B,EAAE,KAAK;CACtC;;MC5BY,WAAW,CAAA;AADxB,IAAA,WAAA,GAAA;AAEU,QAAA,IAAA,CAAA,KAAK,GAAG,IAAI,eAAe,CAAC,eAAe,CAAC,CAAC;AACrD,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;AAK1C,KAAA;AAHC,IAAA,WAAW,CAAC,IAAa,EAAA;AACvB,QAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACvB;;yGANU,WAAW,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;6GAAX,WAAW,EAAA,CAAA,CAAA;4FAAX,WAAW,EAAA,UAAA,EAAA,CAAA;kBADvB,UAAU;;;MCsBE,4BAA4B,CAAA;AA4FvC,IAAA,WAAA,CACU,UAAsB,EACtB,QAAmB,EACnB,WAAwB,EAAA;QAFxB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QACtB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;AA5FlC,QAAA,IAAA,CAAA,cAAc,GAAG;AACf,YAAA,QAAQ,EAAE,KAAK;AACf,YAAA,gBAAgB,EAAE,KAAK;AACvB,YAAA,gBAAgB,EAAE,KAAK;AACvB,YAAA,8BAA8B,EAAE,KAAK;AACrC,YAAA,8BAA8B,EAAE,KAAK;SACtC,CAAC;QACF,IAAQ,CAAA,QAAA,GAAG,KAAK,CAAC;QACjB,IAAI,CAAA,IAAA,GAAG,KAAK,CAAC;AACb,QAAA,IAAA,CAAA,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AAC5B,QAAA,IAAA,CAAA,eAAe,GAA+B,EAAE,GAAG,cAAc,EAAE,CAAC;KAmFhE;AArEJ;;;;AAIG;IAEH,aAAa,GAAA;QACX,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACf,gBAAA,IAAI,EAAE,OAAO;AACd,aAAA,CAAC,CAAC;AACJ,SAAA;KACF;IAED,IAAa,IAAI,CAAC,KAAc,EAAA;AAC9B,QAAA,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,WAAW,EAAE,CAAC;AACpB,SAAA;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KACxC;AAED,IAAA,IAAI,IAAI,GAAA;QACN,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;AAED,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;KACpC;AAED,IAAA,IAAI,OAAO,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KAC1B;AAED,IAAA,IAAI,eAAe,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;KAClC;AAED,IAAA,IAAI,OAAO,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KAC1B;AAED,IAAA,IAAI,WAAW,GAAA;AACb,QAAA,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;AAC9B,YAAA,KAAK,EAAE;gBACL,OAAO,cAAc,CAAC,MAAM,CAAC;AAE/B,YAAA,KAAK,GAAG;gBACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAEnC,YAAA;gBACE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACpC,SAAA;KACF;AAED,IAAA,IAAI,KAAK,GAAA;QACP,OAAO;AACL,YAAA,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK;AACjC,YAAA,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK;SAC3B,CAAC;KACH;AAED,IAAA,IAAI,cAAc,GAAA;AAChB,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;KACjC;AAQD;;;;AAIG;IACH,QAAQ,GAAA;QACN,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAa,KAAI;AACxD,YAAA,IAAI,CAAC,cAAc,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,GAAG,IAAI,EAAE,CAAC;YAC1D,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;gBACjD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AACzC,oBAAA,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AACtC,iBAAA;AACF,aAAA;YACD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CACtD,CAAC,KAAc,KAAK,KAAK,CAC1B,CAAC;AACJ,SAAC,CAAC,CAAC;KACJ;AAED,IAAA,WAAW,CAAC,OAAsB,EAAA;QAChC,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE;YACxD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;AACvC,SAAA;KACF;AAED;;;;;AAKG;IACH,WAAW,GAAA;QACT,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;AACrC,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEvC,OAAO;AACR,SAAA;AAAM,aAAA;;YAEL,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AACtD,YAAA,IAAI,cAAc,CAAC;AAEnB,YAAA,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;AAClC,gBAAA,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;AAChC,oBAAA,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;oBAClC,cAAc,GAAG,IAAI,CAAC;oBAEtB,OAAO;AACR,iBAAA;AACF,aAAA;;YAGD,IAAI,CAAC,cAAc,EAAE;AACnB,gBAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClC,gBAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACxC,aAAA;AACF,SAAA;KACF;AAED;;;;;AAKG;AACH,IAAA,iBAAiB,CAAC,SAAiB,EAAA;AACjC,QAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,GAAG,SAAS,CAAC,CAAC;KAC7E;AAED;;;;;;AAMG;AACH,IAAA,YAAY,CAAC,SAAiB,EAAA;AAC5B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,YAAY,UAAU,CAAC;AACjD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC5C,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;QAErD,IAAI,aAAa,GAAG,KAAK;cACrB,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,MAAM;AAC7C,cAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QAC9B,IAAI,YAAY,GAAG,KAAK;cACpB,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,KAAK;AAC5C,cAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;AAC7B,QAAA,MAAM,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;AACvC,QAAA,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC;AACrC,QAAA,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;AAEnC,QAAA,IAAI,gBAAgB,EAAE;YACpB,aAAa,GAAG,CAAC,CAAC;YAClB,YAAY,GAAG,CAAC,CAAC;AAClB,SAAA;AAED,QAAA,IAAI,QAAQ,CAAC;AACb,QAAA,IAAI,SAAS,CAAC;AAEd,QAAA,QAAQ,SAAS;AACf,YAAA,KAAK,KAAK;gBACR,QAAQ;AACN,oBAAA,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;AACxE,gBAAA,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBAEtC,MAAM;AAER,YAAA,KAAK,QAAQ;gBACX,QAAQ;AACN,oBAAA,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,GAAG,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;AACxE,gBAAA,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBAEtC,MAAM;AACR,YAAA,KAAK,MAAM;AACT,gBAAA,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;gBACtE,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,CAAC;gBAE9C,MAAM;AAER,YAAA,KAAK,OAAO;AACV,gBAAA,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;gBACxE,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,OAAO,CAAC;AACjD,SAAA;AAED,QAAA,IAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,IAAI,CAAC;AACpC,QAAA,IAAI,CAAC,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC;AAEtC,QAAA,OAAO,IAAI,CAAC;KACb;AAED;;;;AAIG;IACH,SAAS,GAAA;QACP,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACjC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAChD,SAAA;KACF;AAED;;;;AAIG;IACH,cAAc,GAAA;AACZ,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;AAChC,YAAA,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,SAAiB,KAAI;AACpE,gBAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;AACnE,aAAC,CAAC,CAAC;AACJ,SAAA;KACF;AAED;;;;AAIG;IACH,QAAQ,GAAA;AACN,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,IAAI,CAAC,UAAU,CAAC,aAAa,EAC7B,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CACjC,CAAC;AACH,SAAA;KACF;IAED,aAAa,GAAA;AACX,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACxC,SAAA;AAED,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;YAClC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtD,SAAA;KACF;AAED;;;;AAIG;IACH,oBAAoB,GAAA;AAClB,QAAA,IAAI,CAAC,mBAAmB;YACtB,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC;KAC1D;AAED;;;;AAIG;IACH,SAAS,GAAA;QACP,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAC5B,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;YAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/C,SAAA;QACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;QAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;cACvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI;cAC5B,EAAE,CAAC;KACR;;0HAjTU,4BAA4B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,WAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAA5B,4BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,4BAA4B,qmBC5BzC,6/CA+BA,EAAA,MAAA,EAAA,CAAA,uvCAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;4FDHa,4BAA4B,EAAA,UAAA,EAAA,CAAA;kBANxC,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,2BAA2B,EAE/B,IAAA,EAAA,EAAE,KAAK,EAAE,OAAO,EAAE,EAAA,QAAA,EAAA,6/CAAA,EAAA,MAAA,EAAA,CAAA,uvCAAA,CAAA,EAAA,CAAA;gJAkBf,IAAI,EAAA,CAAA;sBAAZ,KAAK;gBAEoB,YAAY,EAAA,CAAA;sBAArC,WAAW;uBAAC,WAAW,CAAA;gBACG,aAAa,EAAA,CAAA;sBAAvC,WAAW;uBAAC,YAAY,CAAA;gBACK,eAAe,EAAA,CAAA;sBAA5C,WAAW;uBAAC,eAAe,CAAA;gBACK,mBAAmB,EAAA,CAAA;sBAAnD,WAAW;uBAAC,kBAAkB,CAAA;gBACH,cAAc,EAAA,CAAA;sBAAzC,WAAW;uBAAC,aAAa,CAAA;gBACM,iBAAiB,EAAA,CAAA;sBAAhD,WAAW;uBAAC,iBAAiB,CAAA;gBACO,sBAAsB,EAAA,CAAA;sBAA1D,WAAW;uBAAC,sBAAsB,CAAA;gBACF,aAAa,EAAA,CAAA;sBAA7C,WAAW;uBAAC,kBAAkB,CAAA;gBACI,eAAe,EAAA,CAAA;sBAAjD,WAAW;uBAAC,oBAAoB,CAAA;gBAQjC,aAAa,EAAA,CAAA;sBADZ,YAAY;uBAAC,eAAe,EAAE,CAAC,EAAE,CAAC,CAAA;gBAStB,IAAI,EAAA,CAAA;sBAAhB,KAAK;;;MEjEK,YAAY,CAAA;AACvB;;;;;;;AAOG;IACH,SAAS,CACP,MAAkC,EAClC,MAAkC,EAAA;;QAGlC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AACrC,YAAA,IAAI,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,EAAE;gBACjC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtE,aAAA;AACF,SAAA;;QAGD,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;AAEpC,QAAA,OAAO,MAAM,CAAC;KACf;;0GAxBU,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;8GAAZ,YAAY,EAAA,CAAA,CAAA;4FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBADxB,UAAU;;;MCgCE,4BAA4B,CAAA;AAmBvC,IAAA,WAAA,CAC0D,WAAW,EAC3D,UAAsB,EACtB,wBAAkD,EAClD,MAAsB,EACtB,WAAwB,EACxB,YAA0B,EAC1B,QAAkB,EAAA;QAN8B,IAAW,CAAA,WAAA,GAAX,WAAW,CAAA;QAC3D,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QACtB,IAAwB,CAAA,wBAAA,GAAxB,wBAAwB,CAA0B;QAClD,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QACtB,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;QACxB,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAC1B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAzB5B,IAAe,CAAA,eAAA,GAAG,UAAU,CAAC;QAC7B,IAAiB,CAAA,iBAAA,GAAG,mBAAmB,CAAC;QACxC,IAAiB,CAAA,iBAAA,GAAG,mBAAmB,CAAC;QACxC,IAAiB,CAAA,iBAAA,GAAG,mBAAmB,CAAC;QACxC,IAA0B,CAAA,0BAAA,GAAG,0CAA0C,CAAC;QAExE,IAAO,CAAA,OAAA,GAAG,KAAK,CAAC;QAChB,IAAU,CAAA,UAAA,GAAG,EAAE,CAAC;AAQN,QAAA,IAAA,CAAA,MAAM,GAAsB,IAAI,YAAY,EAAO,CAAC;AACpD,QAAA,IAAA,CAAA,KAAK,GAA0B,IAAI,YAAY,EAAE,CAAC;KAUxD;AAEJ,IAAA,IAAI,OAAO,GAAA;QACT,OAAO,IAAI,CAAC,eAAe,CAAC;KAC7B;AAED,IAAA,IAAI,gBAAgB,GAAA;QAClB,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;KAClE;AAED,IAAA,IAAI,aAAa,GAAA;AACf,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC5B,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,eAAe,CAAC;AAC7B,SAAA;KACF;AAED;;;;AAIG;AAEH,IAAA,YAAY,CAAC,KAAU,EAAA;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAA,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC3B;AAED;;;;AAIG;IAEH,YAAY,GAAA;;AAEV,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC1C,IAAI,CAAC,YAAY,EAAE,CAAC;AACrB,SAAA;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC/B;AAED;;;;;AAKG;AAEH,IAAA,OAAO,CAAC,KAAa,EAAA;AACnB,QAAA,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC3B;AAED;;;;;AAKG;AACH,IAAA,WAAW,CAAC,OAAgC,EAAA;;QAE1C,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC;QACrD,IAAI,YAAY,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,IAAI,CAAC,IAAI,EAAE,CAAC;AACb,SAAA;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACnD,QAAA,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;KAC1D;AAED;;;;AAIG;IACH,WAAW,GAAA;QACT,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,IAAI,CAAC,kBAAkB,EAAE;AAC3B,YAAA,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;AACvC,SAAA;KACF;AAED;;;;AAIG;IACH,mBAAmB,GAAA;AACjB,QAAA,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvC,QAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI;AACjD,gBAAA,KAAK,QAAQ;AACX,oBAAA,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAC/B,QAAQ,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAA,EAAA,CAAI,CAC1D,CAAC;oBACF,MAAM;AAER,gBAAA,KAAK,OAAO;AACV,oBAAA,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAC/B,CAAQ,KAAA,EAAA,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAI,CAAA,EAAA,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAA,EAAA,CAAI,CACrG,CAAC;AACL,aAAA;AACF,SAAA;KACF;AAED;;;;;AAKG;AACH,IAAA,aAAa,CAAC,UAAkB,EAAA;AAC9B,QAAA,MAAM,IAAI,GAAG;AACX,YAAA,QAAQ,EACN,UAAU;AACV,gBAAA,UAAU,CAAC,MAAM;AACjB,gBAAA,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC;AACpC,kBAAE,IAAI;AACN,kBAAE,KAAK;AACX,YAAA,gBAAgB,EACd,UAAU;AACV,gBAAA,UAAU,CAAC,MAAM;AACjB,gBAAA,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,0BAA0B,CAAC;AAC/C,kBAAE,IAAI;AACN,kBAAE,KAAK;AACX,YAAA,gBAAgB,EACd,UAAU;AACV,gBAAA,UAAU,CAAC,MAAM;AACjB,gBAAA,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACtC,kBAAE,IAAI;AACN,kBAAE,KAAK;AACX,YAAA,8BAA8B,EAC5B,UAAU;AACV,gBAAA,UAAU,CAAC,MAAM;AACjB,gBAAA,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACtC,kBAAE,IAAI;AACN,kBAAE,KAAK;AACX,YAAA,8BAA8B,EAC5B,UAAU;AACV,gBAAA,UAAU,CAAC,MAAM;AACjB,gBAAA,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC;AACtC,kBAAE,IAAI;AACN,kBAAE,KAAK;SACZ,CAAC;QAEF,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AACzC,gBAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvB,aAAA;AACF,SAAA;AACD,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,KAAK,KAAK,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACpC;AAED;;;;AAIG;IACH,qBAAqB,GAAA;AACnB,QAAA,IAAI,IAAI,CAAC,KAAK,IAAI,cAAc,EAAE;AAChC,YAAA,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAChD,cAAc,EACd,IAAI,CAAC,KAAK,CACX,CAAC;AACH,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;AAC9C,SAAA;QACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;AAED;;;;;;AAMG;AACH,IAAA,aAAa,CAAC,OAAgC,EAAA;QAC5C,MAAM,mBAAmB,GAAQ,EAAE,CAAC;QACpC,IAAI,gBAAgB,GAAQ,EAAE,CAAC;QAC/B,IAAI,aAAa,GAAQ,EAAE,CAAC;AAE5B,QAAA,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;YAC1B,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,mBAAmB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;AACxD,aAAA;YACD,IAAI,IAAI,KAAK,SAAS,EAAE;AACtB,gBAAA,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;AAC/C,aAAA;AACF,SAAA;QAED,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;AAEzE,QAAA,OAAO,aAAa,CAAC;KACtB;AAED;;;;AAIG;IACH,kBAAkB,GAAA;AAChB,QAAA,IAAI,CAAC,eAAe;AAClB,YAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;KACzD;AAED;;;;AAIG;IACH,WAAW,GAAA;QACT,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,qBAAqB,CAAC,4BAA4B,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;AAED;;;;;AAKG;IACH,YAAY,GAAA;AACV,QAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAC/C,OAAO;AACR,aAAA;YAED,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACnD,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;AAC5B,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACf,gBAAA,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,IAAI,CAAC,aAAa;AAC7B,aAAA,CAAC,CAAC;AACJ,SAAA;KACF;AAED;;;;AAIG;IACH,aAAa,GAAA;QACV,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1D,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACf,YAAA,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI,CAAC,aAAa;AAC7B,SAAA,CAAC,CAAC;KACJ;AAED;;;;;AAKG;IACH,SAAS,GAAA;QACP,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC/C,OAAO;AACR,SAAA;QACA,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG,KAAK,CAAC;AAC3D,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACf,YAAA,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,IAAI,CAAC,aAAa;AAC7B,SAAA,CAAC,CAAC;KACJ;AAED;;;;;AAKG;AACH,IAAA,qBAAqB,CAAC,SAAc,EAAA;AAClC,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,wBAAwB;aAC9C,uBAAuB,CAAC,SAAS,CAAC;AAClC,aAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxB,QAAA,IAAI,CAAC,YAAY,CAAC,QAA0B,CAAC,IAAI,GAAG;AACnD,YAAA,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa;YACtC,eAAe,EAAE,IAAI,CAAC,aAAa;YACnC,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,cAAc;SACf,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AACnD,QAAA,MAAM,OAAO,GAAI,IAAI,CAAC,YAAY,CAAC,QAAiC;aACjE,SAAS,CAAC,CAAC,CAAgB,CAAC;AAC/B,QAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAEnC,QAAA,IAAI,CAAC,kBAAkB,GACrB,IAAI,CAAC,YAAY,CAAC,QACnB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAU,KAAI;AAChC,YAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC3B,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;AAClC,YAAA,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY;AAC9C,gBAAA,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;AACvC,SAAA;KACF;AAED;;;;;;AAMG;IACH,mBAAmB,CACjB,OAAgC,EAChC,aAAyC,EAAA;AAEzC,QAAA,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAC9B,EAAE,EACF,IAAI,CAAC,WAAW,IAAI,EAAE,EACtB,OAAO,EACP,aAAa,CACd,CAAC;KACH;AAED;;;;;AAKG;AACH,IAAA,YAAY,CAAC,KAAU,EAAA;AACrB,QAAA,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;AAC1B,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACf,gBAAA,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI,CAAC,aAAa;AAC7B,aAAA,CAAC,CAAC;AACJ,SAAA;KACF;AAED;;;;AAIG;IACH,IAAI,GAAA;QACF,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC/C,IAAI,CAAC,WAAW,EAAE,CAAC;AACpB,SAAA;AAAM,aAAA,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACjC,IAAI,CAAC,aAAa,EAAE,CAAC;AACtB,SAAA;KACF;AAED;;;;AAIG;IACH,IAAI,GAAA;QACF,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;AAnYU,4BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,4BAA4B,kBAoBjB,0BAA0B,EAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,wBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,YAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,QAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;8GApBrC,4BAA4B,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,EAAA,KAAA,EAAA,CAAA,qBAAA,EAAA,OAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,mCAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,8BAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,aAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;4FAA5B,4BAA4B,EAAA,UAAA,EAAA,CAAA;kBAJxC,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,uBAAuB;AACjC,oBAAA,QAAQ,EAAE,qBAAqB;AAChC,iBAAA,CAAA;;0BAqBI,QAAQ;;0BAAI,MAAM;2BAAC,0BAA0B,CAAA;+MANlB,KAAK,EAAA,CAAA;sBAAlC,KAAK;uBAAC,qBAAqB,CAAA;gBAElB,MAAM,EAAA,CAAA;sBAAf,MAAM;gBACG,KAAK,EAAA,CAAA;sBAAd,MAAM;gBAkCP,YAAY,EAAA,CAAA;sBADX,YAAY;uBAAC,SAAS,EAAE,CAAC,qBAAqB,CAAC,CAAA;gBAahD,YAAY,EAAA,CAAA;sBADX,YAAY;uBAAC,UAAU,CAAA;gBAgBxB,OAAO,EAAA,CAAA;sBADN,YAAY;uBAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC,CAAA;;;MCjGnC,yBAAyB,CAAA;AACpC;;;;;;;AAOG;IACH,OAAO,OAAO,CACZ,WAAuC,EAAA;QAEvC,OAAO;AACL,YAAA,QAAQ,EAAE,yBAAyB;AACnC,YAAA,SAAS,EAAE;AACT,gBAAA;AACE,oBAAA,OAAO,EAAE,0BAA0B;AACnC,oBAAA,QAAQ,EAAE,WAAW;AACtB,iBAAA;AACF,aAAA;SACF,CAAC;KACH;;uHArBU,yBAAyB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAzB,yBAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,yBAAyB,iBALnB,4BAA4B,EAAE,4BAA4B,CAC/D,EAAA,OAAA,EAAA,CAAA,YAAY,aAEZ,4BAA4B,CAAA,EAAA,CAAA,CAAA;wHAE7B,yBAAyB,EAAA,SAAA,EAHvB,CAAC,WAAW,EAAE,YAAY,CAAC,EAAA,OAAA,EAAA,CAD7B,CAAC,YAAY,CAAC,CAAA,EAAA,CAAA,CAAA;4FAId,yBAAyB,EAAA,UAAA,EAAA,CAAA;kBANrC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACN,oBAAA,YAAY,EAAE,CAAC,4BAA4B,EAAE,4BAA4B,CAAC;oBAC1E,OAAO,EAAE,CAAC,YAAY,CAAC;AACvB,oBAAA,SAAS,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;oBACtC,OAAO,EAAE,CAAC,4BAA4B,CAAC;AAC1C,iBAAA,CAAA;;;ACdD;;AAEG;;ACFH;;AAEG;;;;"}